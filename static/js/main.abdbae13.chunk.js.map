{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["About","className","id","type","Alert","props","alert","role","msg","Navbar","Mode","to","title","placeholder","text","onClick","togglemode","htmlFor","enable","Textform","useState","Text","SetText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newtext","toUpperCase","showalert","toLowerCase","document","querySelector","select","navigator","clipboard","writeText","split","length","proptype","PropTypes","string","isRequired","defaultProps","App","mode","setmode","setenable","settext","setalert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.abdbae13.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n    <div className= \"container my-3 \">\r\n        <h3 className= \"my-3\"> About Us </h3>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n    <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n            Accordion Item #1\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n        <div className=\"accordion-body\">\r\n            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n        </div>\r\n        </div>\r\n    </div>\r\n    <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n            Accordion Item #2\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n        <div className=\"accordion-body\">\r\n            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n        </div>\r\n        </div>\r\n    </div>\r\n    <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n            Accordion Item #3\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n        <div className=\"accordion-body\">\r\n            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n        </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n    <div className=\"container my-3\">\r\n        <button type = \"button\" className = \"btn btn-primary\">Dark mode</button>\r\n    </div>\r\n    </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert &&<div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                {props.alert.msg}\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n    <>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.Mode} bg-${props.Mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n        </li>\r\n      </ul>\r\n      <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form>\r\n      <div className={`form-check form-switch mx-1 ${props.text}`}>\r\n        <input className=\"form-check-input\" type=\"checkbox\" onClick = {props.togglemode} id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.enable}</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n</>\r\n    )\r\n}\r\nNavbar.proptype = {\r\n    title: PropTypes.string.isRequired\r\n};\r\nNavbar.defaultProps = {\r\n    title : \"Set title here\"\r\n};\r\n\r\n\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const [Text , SetText] = useState(\"\");\r\n    const handleUpClick = ()=>{\r\n        let newtext = Text.toUpperCase();\r\n        SetText(newtext);\r\n        props.showalert(\"Coverted to uppercase\" , \"success\");\r\n    }\r\n    const handlechange = (event)=>{\r\n        SetText(event.target.value);\r\n    }\r\n    const handlelowClick = ()=>{\r\n        SetText(Text.toLowerCase());\r\n        props.showalert(\"Coverted to lowercase\" , \"success\");\r\n    }\r\n    const handleClear = ()=>{\r\n        let newText = \" \";\r\n        SetText(newText);\r\n        props.showalert(\"Text has been cleared\" , \"success\");\r\n    }\r\n    const handleCopy = ()=>{\r\n        var text = document.querySelector(\"#exampleFormControlTextarea1\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showalert(\"Text has been copied\" , \"success\");\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.Mode ==='light'?'black':'white'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\"> Textarea</label>\r\n            <textarea className=\"form-control\" value = {Text} onChange = {handlechange} style ={{backgroundColor: props.Mode ==='light'?'white':'grey', color:props.Mode ==='light'?'black':'white'}} id=\"exampleFormControlTextarea1\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick = {handleUpClick}>Covert to uppercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick = {handlelowClick}>Covert to lowercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick = {handleClear}>Clear Text</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick = {handleCopy}>Copy Text</button>\r\n        \r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.Mode ==='light'?'black':'white'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>\r\n                <b>{Text.split(\" \").length}</b> words and <b>{Text.length}</b> charecters\r\n            </p>\r\n            <p> U can read this in {0.008*Text.split(\" \").length} minutes</p>\r\n            <h3> Preview</h3>\r\n            <p> {Text.length===0?\"Enter text above to preview here\":Text} </p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport{\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n}from \"react-router-dom\"\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [enable, setenable] = useState(\"Enable Dark Mode\");\n  const [text, settext] = useState(\"text-dark\");\n  const togglemode = ()=>{\n    if(mode === 'light'){\n      setmode('dark');\n      setenable('Enable Light mode');\n      settext(\"text-light\");\n      document.body.style.backgroundColor = \"grey\";\n      showalert(\"Dark mode enabled\" , \"success\");\n    }\n    else{\n      setmode('light');\n      setenable('Enable Dark mode');\n      settext('text-dark');\n      document.body.style.backgroundColor = \"white\";\n      showalert(\"Light mode enabled\" , \"success\");\n    }\n  }\n  const [alert, setalert] = useState(null);\n  const showalert = (message , type)=>{\n    setalert({\n      msg: message,\n      type: type\n    })\n  }\n  setTimeout(() => {\n    setalert(null);\n  }, 7000);\n  \n  return (\n    <>\n      <Router>\n      <Navbar title = \"TextUtils\" Mode = {mode} togglemode ={togglemode} enable = {enable} text = {text}/>\n      <Alert alert ={alert}/>\n      <div className=\"container my-3\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <Textform showalert = {showalert} heading = \"Enter text to analyse\" Mode = {mode}/>\n          </Route>\n      </Switch>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}